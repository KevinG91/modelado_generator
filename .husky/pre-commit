#!/bin/sh
# .husky/pre-commit

echo "🔍 Running pre-commit checks..."

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

print_status() {
    echo "${2}${1}${NC}"
}

exit_with_error() {
    print_status "❌ $1" "$RED"
    exit 1
}

print_success() {
    print_status "✅ $1" "$GREEN"
}

print_info() {
    print_status "ℹ️  $1" "$YELLOW"
}

# Commented out for initial commit
print_info "Checking if current branch is based on origin/main..."
current_branch=$(git branch --show-current)

if [ "$current_branch" = "main" ]; then
    print_info "You're on main branch, skipping ancestor check"
else
    if ! git merge-base --is-ancestor origin/main HEAD 2>/dev/null; then
        exit_with_error "Current branch is not based on origin/main. Please rebase your branch."
    fi
    print_success "Current branch is properly based on origin/main"
fi

2. Fetch latest commits
print_info "Fetching latest commits from origin..."
if ! git fetch origin; then
    exit_with_error "Failed to fetch from origin"
fi
print_success "Successfully fetched latest commits"

print_info "Checking if origin/main has new commits..."
LOCAL_MAIN=$(git rev-parse main 2>/dev/null || echo "")
REMOTE_MAIN=$(git rev-parse origin/main 2>/dev/null || echo "")

if [ "$LOCAL_MAIN" != "$REMOTE_MAIN" ]; then
    exit_with_error "Local main is behind origin/main, please update"
fi

print_success "All pre-commit checks passed! 🎉";

# Run Prettier on JSON, YAML, and Markdown files
print_info "Checking for files that need Prettier formatting..."
PRETTIER_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(json|yaml|yml|md|js|ts|css|scss|html)$' || true)

if [ -n "$PRETTIER_FILES" ]; then
    print_info "Found files for Prettier, running formatter..."
    
    # Check if prettier is installed
    if ! command -v npx &> /dev/null || ! npx prettier --version &> /dev/null; then
        exit_with_error "Prettier is not installed. Please run: npm install"
    fi
    
    # Run prettier on each file
    echo "$PRETTIER_FILES" | while read -r file; do
        if [ -f "$file" ]; then
            print_info "Formatting file with Prettier: $file"
            if ! npx prettier --write "$file"; then
                exit_with_error "Prettier failed to format $file"
            fi
            
            # Add the formatted file back to staging
            git add "$file"
        fi
    done
    
    print_success "Prettier formatting completed"
else
    print_info "No files found that need Prettier formatting"
fi

# Run Python linting with flake8/black
print_info "Checking for staged Python files..."
PY_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.py$' || true)

if [ -n "$PY_FILES" ]; then
    print_info "Found Python files, running formatting..."
    
    # Check if black is installed (optional - remove if you don't want it)
    if command -v black &> /dev/null; then
        print_info "Running black formatter..."
        echo "$PY_FILES" | while read -r file; do
            if [ -f "$file" ]; then
                print_info "Formatting Python file: $file"
                black "$file" --line-length 144
                git add "$file"
            fi
        done
    fi
    
    # Check if flake8 is installed (optional - remove if you don't want it)
    # if command -v flake8 &> /dev/null; then
    #     print_info "Running flake8 linting..."
    #     echo "$PY_FILES" | while read -r file; do
    #         if [ -f "$file" ]; then
    #             if ! flake8 "$file" --max-line-length=144; then
    #                 exit_with_error "flake8 linting failed for $file"
    #             fi
    #         fi
    #     done
    # fi
    
    print_success "Python processing completed"
else
    print_info "No Python files found in staged changes"
fi

# Run SQLFluff on staged SQL files
print_info "Checking for staged SQL files..."
SQL_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(sql|SQL)$' || true)

if [ -n "$SQL_FILES" ]; then
    print_info "Found SQL files, running SQLFluff..."
    
    # Check if sqlfluff is installed
    if ! command -v sqlfluff &> /dev/null; then
        exit_with_error "SQLFluff is not installed. Please install it with: pip install sqlfluff"
    fi
    
    # Run SQLFluff fix on each SQL file
    echo "$SQL_FILES" | while read -r file; do
        if [ -f "$file" ]; then
            print_info "Fixing SQL file: $file"
            if ! sqlfluff fix "$file" --dialect=hive; then
                exit_with_error "SQLFluff failed to process $file"
            fi
            
            # Add the fixed file back to staging
            git add "$file"
        fi
    done
    
    print_success "SQLFluff processing completed"
    
    # Final validation - lint the SQL files to ensure they're clean
    print_info "Running final SQL validation..."
    echo "$SQL_FILES" | while read -r file; do
        if [ -f "$file" ]; then
            if ! sqlfluff lint "$file" --dialect=hive; then
                exit_with_error "SQL file $file still has linting issues after fixing"
            fi
        fi
    done
    print_success "All SQL files passed validation"
else
    print_info "No SQL files found in staged changes"
fi

print_success "All pre-commit checks passed! 🎉"